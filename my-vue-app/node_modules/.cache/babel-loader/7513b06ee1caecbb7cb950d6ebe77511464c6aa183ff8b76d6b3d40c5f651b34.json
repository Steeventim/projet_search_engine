{"ast":null,"code":"import { authService } from \"../services/authService\"; // Importation du service d'authentification\n\nexport default {\n  data() {\n    return {\n      step: 1,\n      valid: false,\n      loginEmail: \"\",\n      loginPassword: \"\",\n      rememberMe: false,\n      signupFirstName: \"\",\n      signupLastName: \"\",\n      signupEmail: \"\",\n      signupPassword: \"\",\n      termsAccepted: false\n    };\n  },\n  methods: {\n    isValidEmail(email) {\n      const regex = /.+@.+\\..+/;\n      return regex.test(email);\n    },\n    async submitLogin() {\n      if (this.isValidEmail(this.loginEmail) && this.loginPassword) {\n        try {\n          const response = await authService.login(this.loginEmail, this.loginPassword);\n          console.log(\"Login success:\", response);\n        } catch (error) {\n          console.error(\"Login failed:\", error);\n          alert(\"Login failed. Please check your credentials.\");\n        }\n      } else {\n        alert(\"Please fill in valid login details\");\n      }\n    },\n    async submitSignup() {\n      if (this.signupFirstName && this.signupLastName && this.isValidEmail(this.signupEmail) && this.signupPassword && this.termsAccepted) {\n        try {\n          const response = await authService.signup({\n            firstName: this.signupFirstName,\n            lastName: this.signupLastName,\n            email: this.signupEmail,\n            password: this.signupPassword\n          });\n          console.log(\"Signup success:\", response);\n        } catch (error) {\n          console.error(\"Signup failed:\", error);\n          alert(\"Signup failed. Please try again.\");\n        }\n      } else {\n        alert(\"Please fill in valid signup details\");\n      }\n    }\n  },\n  watch: {\n    loginEmail() {\n      this.valid = this.isValidEmail(this.loginEmail) && this.loginPassword;\n    },\n    loginPassword() {\n      this.valid = this.isValidEmail(this.loginEmail) && this.loginPassword;\n    },\n    signupEmail() {\n      this.valid = this.signupFirstName && this.signupLastName && this.isValidEmail(this.signupEmail) && this.signupPassword && this.termsAccepted;\n    },\n    signupPassword() {\n      this.valid = this.signupFirstName && this.signupLastName && this.isValidEmail(this.signupEmail) && this.signupPassword && this.termsAccepted;\n    }\n  }\n};","map":{"version":3,"names":["authService","data","step","valid","loginEmail","loginPassword","rememberMe","signupFirstName","signupLastName","signupEmail","signupPassword","termsAccepted","methods","isValidEmail","email","regex","test","submitLogin","response","login","console","log","error","alert","submitSignup","signup","firstName","lastName","password","watch"],"sources":["/home/tims/Api_ES_project/my-vue-app/src/components/Login.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Formulaire de Connexion -->\n    <form @submit.prevent=\"submitLogin\">\n      <input type=\"email\" v-model=\"loginEmail\" placeholder=\"Email\" />\n      <input type=\"password\" v-model=\"loginPassword\" placeholder=\"Password\" />\n      <button type=\"submit\">Login</button>\n    </form>\n\n    <!-- Formulaire d'Inscription -->\n    <form @submit.prevent=\"submitSignup\">\n      <input type=\"text\" v-model=\"signupFirstName\" placeholder=\"First Name\" />\n      <input type=\"text\" v-model=\"signupLastName\" placeholder=\"Last Name\" />\n      <input type=\"email\" v-model=\"signupEmail\" placeholder=\"Email\" />\n      <input type=\"password\" v-model=\"signupPassword\" placeholder=\"Password\" />\n      <input type=\"checkbox\" v-model=\"termsAccepted\" /> I Accept the Terms &\n      Conditions\n      <button type=\"submit\" :disabled=\"!valid\">Sign up</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { authService } from \"../services/authService\"; // Importation du service d'authentification\n\nexport default {\n  data() {\n    return {\n      step: 1,\n      valid: false,\n      loginEmail: \"\",\n      loginPassword: \"\",\n      rememberMe: false,\n      signupFirstName: \"\",\n      signupLastName: \"\",\n      signupEmail: \"\",\n      signupPassword: \"\",\n      termsAccepted: false,\n    };\n  },\n  methods: {\n    isValidEmail(email) {\n      const regex = /.+@.+\\..+/;\n      return regex.test(email);\n    },\n    async submitLogin() {\n      if (this.isValidEmail(this.loginEmail) && this.loginPassword) {\n        try {\n          const response = await authService.login(\n            this.loginEmail,\n            this.loginPassword\n          );\n          console.log(\"Login success:\", response);\n        } catch (error) {\n          console.error(\"Login failed:\", error);\n          alert(\"Login failed. Please check your credentials.\");\n        }\n      } else {\n        alert(\"Please fill in valid login details\");\n      }\n    },\n    async submitSignup() {\n      if (\n        this.signupFirstName &&\n        this.signupLastName &&\n        this.isValidEmail(this.signupEmail) &&\n        this.signupPassword &&\n        this.termsAccepted\n      ) {\n        try {\n          const response = await authService.signup({\n            firstName: this.signupFirstName,\n            lastName: this.signupLastName,\n            email: this.signupEmail,\n            password: this.signupPassword,\n          });\n          console.log(\"Signup success:\", response);\n        } catch (error) {\n          console.error(\"Signup failed:\", error);\n          alert(\"Signup failed. Please try again.\");\n        }\n      } else {\n        alert(\"Please fill in valid signup details\");\n      }\n    },\n  },\n  watch: {\n    loginEmail() {\n      this.valid = this.isValidEmail(this.loginEmail) && this.loginPassword;\n    },\n    loginPassword() {\n      this.valid = this.isValidEmail(this.loginEmail) && this.loginPassword;\n    },\n    signupEmail() {\n      this.valid =\n        this.signupFirstName &&\n        this.signupLastName &&\n        this.isValidEmail(this.signupEmail) &&\n        this.signupPassword &&\n        this.termsAccepted;\n    },\n    signupPassword() {\n      this.valid =\n        this.signupFirstName &&\n        this.signupLastName &&\n        this.isValidEmail(this.signupEmail) &&\n        this.signupPassword &&\n        this.termsAccepted;\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}