{"ast":null,"code":"export const authService = {\n  /**\n   * Fonction pour se connecter\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise}\n   */\n  login(email, password) {\n    // Simule un appel à une API pour vérifier les informations de connexion\n    return new Promise((resolve, reject) => {\n      // Vous pouvez remplacer cette logique par un véritable appel à une API backend\n      if (email === \"test@example.com\" && password === \"password\") {\n        // Simuler une réponse d'API\n        const user = {\n          email: email,\n          token: \"fake-jwt-token\" // Un jeton JWT ou autre donné par votre API\n        };\n        localStorage.setItem(\"user\", JSON.stringify(user)); // Stocker les informations utilisateur\n        resolve(user);\n      } else {\n        reject(\"Email ou mot de passe incorrect.\");\n      }\n    });\n  },\n  /**\n   * Fonction pour s'inscrire (vous pouvez ajuster cela pour inclure d'autres champs)\n   * @param {string} firstName - Prénom de l'utilisateur\n   * @param {string} lastName - Nom de l'utilisateur\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise}\n   */\n  register(firstName, lastName, email, password) {\n    return new Promise((resolve, reject) => {\n      // Simule un appel d'inscription à une API\n      if (email && password) {\n        const user = {\n          firstName: firstName,\n          lastName: lastName,\n          email: email,\n          token: \"fake-jwt-token\"\n        };\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        resolve(user);\n      } else {\n        reject(\"Veuillez remplir tous les champs.\");\n      }\n    });\n  },\n  /**\n   * Fonction pour se déconnecter\n   */\n  logout() {\n    // Supprimer l'utilisateur du localStorage pour déconnecter\n    localStorage.removeItem(\"user\");\n  },\n  /**\n   * Fonction pour obtenir les informations de l'utilisateur connecté\n   * @returns {Object|null} - Retourne les informations utilisateur si elles existent\n   */\n  getUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  },\n  /**\n   * Fonction pour vérifier si l'utilisateur est connecté\n   * @returns {boolean} - Retourne true si l'utilisateur est connecté, sinon false\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem(\"user\"); // Si un utilisateur est présent dans localStorage\n  }\n};","map":{"version":3,"names":["authService","login","email","password","Promise","resolve","reject","user","token","localStorage","setItem","JSON","stringify","register","firstName","lastName","logout","removeItem","getUser","parse","getItem","isAuthenticated"],"sources":["/home/tims/Api_ES_project/my-vue-app/src/services/authService.js"],"sourcesContent":["export const authService = {\n  /**\n   * Fonction pour se connecter\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise}\n   */\n  login(email, password) {\n    // Simule un appel à une API pour vérifier les informations de connexion\n    return new Promise((resolve, reject) => {\n      // Vous pouvez remplacer cette logique par un véritable appel à une API backend\n      if (email === \"test@example.com\" && password === \"password\") {\n        // Simuler une réponse d'API\n        const user = {\n          email: email,\n          token: \"fake-jwt-token\", // Un jeton JWT ou autre donné par votre API\n        };\n        localStorage.setItem(\"user\", JSON.stringify(user)); // Stocker les informations utilisateur\n        resolve(user);\n      } else {\n        reject(\"Email ou mot de passe incorrect.\");\n      }\n    });\n  },\n\n  /**\n   * Fonction pour s'inscrire (vous pouvez ajuster cela pour inclure d'autres champs)\n   * @param {string} firstName - Prénom de l'utilisateur\n   * @param {string} lastName - Nom de l'utilisateur\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise}\n   */\n  register(firstName, lastName, email, password) {\n    return new Promise((resolve, reject) => {\n      // Simule un appel d'inscription à une API\n      if (email && password) {\n        const user = {\n          firstName: firstName,\n          lastName: lastName,\n          email: email,\n          token: \"fake-jwt-token\",\n        };\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        resolve(user);\n      } else {\n        reject(\"Veuillez remplir tous les champs.\");\n      }\n    });\n  },\n\n  /**\n   * Fonction pour se déconnecter\n   */\n  logout() {\n    // Supprimer l'utilisateur du localStorage pour déconnecter\n    localStorage.removeItem(\"user\");\n  },\n\n  /**\n   * Fonction pour obtenir les informations de l'utilisateur connecté\n   * @returns {Object|null} - Retourne les informations utilisateur si elles existent\n   */\n  getUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  },\n\n  /**\n   * Fonction pour vérifier si l'utilisateur est connecté\n   * @returns {boolean} - Retourne true si l'utilisateur est connecté, sinon false\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem(\"user\"); // Si un utilisateur est présent dans localStorage\n  },\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;EACzB;AACF;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrB;IACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC;MACA,IAAIJ,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,UAAU,EAAE;QAC3D;QACA,MAAMI,IAAI,GAAG;UACXL,KAAK,EAAEA,KAAK;UACZM,KAAK,EAAE,gBAAgB,CAAE;QAC3B,CAAC;QACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;QACpDF,OAAO,CAACE,IAAI,CAAC;MACf,CAAC,MAAM;QACLD,MAAM,CAAC,kCAAkC,CAAC;MAC5C;IACF,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,QAAQA,CAACC,SAAS,EAAEC,QAAQ,EAAEb,KAAK,EAAEC,QAAQ,EAAE;IAC7C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC;MACA,IAAIJ,KAAK,IAAIC,QAAQ,EAAE;QACrB,MAAMI,IAAI,GAAG;UACXO,SAAS,EAAEA,SAAS;UACpBC,QAAQ,EAAEA,QAAQ;UAClBb,KAAK,EAAEA,KAAK;UACZM,KAAK,EAAE;QACT,CAAC;QACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;QAClDF,OAAO,CAACE,IAAI,CAAC;MACf,CAAC,MAAM;QACLD,MAAM,CAAC,mCAAmC,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;EACEU,MAAMA,CAAA,EAAG;IACP;IACAP,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED;AACF;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAOP,IAAI,CAACQ,KAAK,CAACV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD,CAAC;EAED;AACF;AACA;AACA;EACEC,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAACZ,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}